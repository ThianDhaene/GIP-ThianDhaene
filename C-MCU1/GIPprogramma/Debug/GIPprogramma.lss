
GIPprogramma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000ea6  00000f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ea6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000169  00800176  00800176  00000fb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afb  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000417  00000000  00000000  00001c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4b  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000637  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000037bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 ea       	ldi	r30, 0xA6	; 166
  90:	fe e0       	ldi	r31, 0x0E	; 14
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 37       	cpi	r26, 0x76	; 118
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a6 e7       	ldi	r26, 0x76	; 118
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	af 3d       	cpi	r26, 0xDF	; 223
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  b2:	0c 94 51 07 	jmp	0xea2	; 0xea2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <I2C>:
	while(i < 64)					//Blijft lus doorlopen zolang i kleiner is dan 64 om niet over de maximum hoeveelheid data te gaan
	{
		if( s[i] == '\0' ) break;	//
		sendChar0(s[i++]);			//
	}
}
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	d8 2f       	mov	r29, r24
  c0:	c6 2f       	mov	r28, r22
  c2:	0e 94 35 04 	call	0x86a	; 0x86a <twi_start>
  c6:	8d 2f       	mov	r24, r29
  c8:	0e 94 45 04 	call	0x88a	; 0x88a <twi_write>
  cc:	8c 2f       	mov	r24, r28
  ce:	80 95       	com	r24
  d0:	0e 94 45 04 	call	0x88a	; 0x88a <twi_write>
  d4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <twi_stop>
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <serieel_init1>:
  de:	52 98       	cbi	0x0a, 2	; 10
  e0:	53 9a       	sbi	0x0a, 3	; 10
  e2:	e8 ec       	ldi	r30, 0xC8	; 200
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	80 83       	st	Z, r24
  ec:	87 e1       	ldi	r24, 0x17	; 23
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  f4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  f8:	aa ec       	ldi	r26, 0xCA	; 202
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	8c 91       	ld	r24, X
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	8c 93       	st	X, r24
 102:	e9 ec       	ldi	r30, 0xC9	; 201
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	80 83       	st	Z, r24
 10c:	8c 91       	ld	r24, X
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	8c 93       	st	X, r24
 112:	8c 91       	ld	r24, X
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	8c 93       	st	X, r24
 118:	80 81       	ld	r24, Z
 11a:	88 61       	ori	r24, 0x18	; 24
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <serieel_init0>:
 126:	50 98       	cbi	0x0a, 0	; 10
 128:	51 9a       	sbi	0x0a, 1	; 10
 12a:	e0 ec       	ldi	r30, 0xC0	; 192
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	87 e1       	ldi	r24, 0x17	; 23
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 140:	a2 ec       	ldi	r26, 0xC2	; 194
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	8c 91       	ld	r24, X
 146:	86 60       	ori	r24, 0x06	; 6
 148:	8c 93       	st	X, r24
 14a:	e1 ec       	ldi	r30, 0xC1	; 193
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8b 7f       	andi	r24, 0xFB	; 251
 152:	80 83       	st	Z, r24
 154:	8c 91       	ld	r24, X
 156:	87 7f       	andi	r24, 0xF7	; 247
 158:	8c 93       	st	X, r24
 15a:	8c 91       	ld	r24, X
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	8c 93       	st	X, r24
 160:	80 81       	ld	r24, Z
 162:	88 61       	ori	r24, 0x18	; 24
 164:	80 83       	st	Z, r24
 166:	80 81       	ld	r24, Z
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <sendChar1>:

void sendChar1(char data)
{
	while( ! (UCSR1A & 0x20) ); //Er word gewacht tot dat de vlag UDRE0 1 is en dus het register UDR0 leeg is
 16e:	e8 ec       	ldi	r30, 0xC8	; 200
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	95 ff       	sbrs	r25, 5
 176:	fd cf       	rjmp	.-6      	; 0x172 <sendChar1+0x4>
	UDR1 = data; //De te versturen data word in register UDR0 geplaatst
 178:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 17c:	08 95       	ret

0000017e <sendString1>:
}

void sendString1(char s[])
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	fc 01       	movw	r30, r24
	int i = 0;						//
	while(i < 64)					//Blijft lus doorlopen zolang i kleiner is dan 64 om niet over de maximum hoeveelheid data te gaan
	{
		if( s[i] == '\0' ) break;	//
 188:	80 81       	ld	r24, Z
 18a:	81 11       	cpse	r24, r1
 18c:	0a c0       	rjmp	.+20     	; 0x1a2 <sendString1+0x24>
 18e:	11 c0       	rjmp	.+34     	; 0x1b2 <sendString1+0x34>
 190:	89 91       	ld	r24, Y+
 192:	88 23       	and	r24, r24
 194:	71 f0       	breq	.+28     	; 0x1b2 <sendString1+0x34>
		sendChar1(s[i++]);			//
 196:	0e 94 b7 00 	call	0x16e	; 0x16e <sendChar1>
}

void sendString1(char s[])
{
	int i = 0;						//
	while(i < 64)					//Blijft lus doorlopen zolang i kleiner is dan 64 om niet over de maximum hoeveelheid data te gaan
 19a:	c0 17       	cp	r28, r16
 19c:	d1 07       	cpc	r29, r17
 19e:	c1 f7       	brne	.-16     	; 0x190 <sendString1+0x12>
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <sendString1+0x34>
 1a2:	8f 01       	movw	r16, r30
	{
		if( s[i] == '\0' ) break;	//
		sendChar1(s[i++]);			//
 1a4:	0e 94 b7 00 	call	0x16e	; 0x16e <sendChar1>
 1a8:	e8 01       	movw	r28, r16
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	00 5c       	subi	r16, 0xC0	; 192
 1ae:	1f 4f       	sbci	r17, 0xFF	; 255
 1b0:	ef cf       	rjmp	.-34     	; 0x190 <sendString1+0x12>
	}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <init_servo>:

void init_servo()
{
	//PRESCALER 8
	TCCR1B&=~((1<<CS12)|(1<<CS10));
 1bc:	a1 e8       	ldi	r26, 0x81	; 129
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	8c 91       	ld	r24, X
 1c2:	8a 7f       	andi	r24, 0xFA	; 250
 1c4:	8c 93       	st	X, r24
	TCCR1B|=(1<<CS11);
 1c6:	8c 91       	ld	r24, X
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	8c 93       	st	X, r24
	//OC1A INSTELLEN ALS UITGANG
	DDRD|=(1<<DDRD5);
 1cc:	55 9a       	sbi	0x0a, 5	; 10
	DDRD|=(1<<DDRD4);
 1ce:	54 9a       	sbi	0x0a, 4	; 10
	//WGM BITS MODE 14
	TCCR1A&=~(1<<WGM10);
 1d0:	e0 e8       	ldi	r30, 0x80	; 128
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8e 7f       	andi	r24, 0xFE	; 254
 1d8:	80 83       	st	Z, r24
	TCCR1A|=(1<<WGM11);
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24
	TCCR1B|=((1<<WGM12)|(1<<WGM13));
 1e0:	8c 91       	ld	r24, X
 1e2:	88 61       	ori	r24, 0x18	; 24
 1e4:	8c 93       	st	X, r24
	//COMBITS A instellen
	TCCR1A|=(1<<COM1A1);
 1e6:	80 81       	ld	r24, Z
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	80 83       	st	Z, r24
	TCCR1A&=~(1<<COM1A0);
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 7b       	andi	r24, 0xBF	; 191
 1f0:	80 83       	st	Z, r24
	//COMBITS B instellen
	TCCR1A|=(1<<COM1B1);
 1f2:	80 81       	ld	r24, Z
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	80 83       	st	Z, r24
	TCCR1A&=~(1<<COM1B0);
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 7e       	andi	r24, 0xEF	; 239
 1fc:	80 83       	st	Z, r24
	//ICR1
	ICR1 = 9215; // aantal telpulsen
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	93 e2       	ldi	r25, 0x23	; 35
 202:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 206:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	//OCR1A
	OCR1A = 231; //
 20a:	87 ee       	ldi	r24, 0xE7	; 231
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 212:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 231; //
 216:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 21a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 21e:	08 95       	ret

00000220 <__vector_16>:
}

ISR (TIMER0_COMPA_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	PORTB ^=(1<<PORTB0)|(1<<PORTB1);
 232:	95 b1       	in	r25, 0x05	; 5
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	89 27       	eor	r24, r25
 238:	85 b9       	out	0x05, r24	; 5
	if(linkrechts==1)
 23a:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <linkrechts>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	51 f4       	brne	.+20     	; 0x256 <__vector_16+0x36>
	{
		PORTA = array1[waarde_e];
 242:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <waarde_e>
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ee 5f       	subi	r30, 0xFE	; 254
 24a:	fe 4f       	sbci	r31, 0xFE	; 254
 24c:	80 81       	ld	r24, Z
 24e:	82 b9       	out	0x02, r24	; 2
		linkrechts=0;
 250:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <linkrechts>
 254:	0a c0       	rjmp	.+20     	; 0x26a <__vector_16+0x4a>
	}
	else
	{
		PORTA = array1[waarde_t];
 256:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <waarde_t>
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ee 5f       	subi	r30, 0xFE	; 254
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	80 81       	ld	r24, Z
 262:	82 b9       	out	0x02, r24	; 2
		linkrechts=1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <linkrechts>
	}
	ticks16++;
 26a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <ticks16>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <ticks16>
	if(ticks16==64)
 274:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <ticks16>
 278:	80 34       	cpi	r24, 0x40	; 64
 27a:	29 f4       	brne	.+10     	; 0x286 <__vector_16+0x66>
	{
		ticks16=0;
 27c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <ticks16>
		ticks1s=1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <ticks1s>
	}
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <waarde7>:

char waarde7(char waarde)
{
	waarde_e=waarde % 10;
 298:	9d ec       	ldi	r25, 0xCD	; 205
 29a:	89 9f       	mul	r24, r25
 29c:	91 2d       	mov	r25, r1
 29e:	11 24       	eor	r1, r1
 2a0:	29 2f       	mov	r18, r25
 2a2:	26 95       	lsr	r18
 2a4:	26 95       	lsr	r18
 2a6:	26 95       	lsr	r18
 2a8:	22 0f       	add	r18, r18
 2aa:	32 2f       	mov	r19, r18
 2ac:	33 0f       	add	r19, r19
 2ae:	33 0f       	add	r19, r19
 2b0:	23 0f       	add	r18, r19
 2b2:	82 1b       	sub	r24, r18
 2b4:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <waarde_e>
	waarde_t=waarde /10;
 2b8:	96 95       	lsr	r25
 2ba:	96 95       	lsr	r25
 2bc:	96 95       	lsr	r25
 2be:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <waarde_t>
	return 1;
}
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret

000002c6 <main>:
char rx_buf[160];
volatile unsigned char msg=MSG_OLD;


int main(void)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <main+0x6>
 2cc:	1f 92       	push	r1
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<DDRD7);
 2d2:	57 9a       	sbi	0x0a, 7	; 10
	
	DDRA = 0xFF;
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	81 b9       	out	0x01, r24	; 1
	DDRB=(1<<DDRB0)|(1<<DDRB1);
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	84 b9       	out	0x04, r24	; 4
	PORTB&=~(1<<PORTB0);
 2dc:	28 98       	cbi	0x05, 0	; 5
	PORTB|=(1<<PORTB1);
 2de:	29 9a       	sbi	0x05, 1	; 5
	
	//P14 P15 P16 P17
	DDRC &=~ (1<<DDRC4)|(1<<DDRC5)|(1<<DDRC6)|(1<<DDRC7);
 2e0:	3c 98       	cbi	0x07, 4	; 7
	
	
	//opstarten van verschillende componenten
	init_servo();
 2e2:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_servo>
	serieel_init1();
 2e6:	0e 94 6f 00 	call	0xde	; 0xde <serieel_init1>
	serieel_init0();
 2ea:	0e 94 93 00 	call	0x126	; 0x126 <serieel_init0>
	twi_init();
 2ee:	0e 94 31 04 	call	0x862	; 0x862 <twi_init>
	}
}

char Servo1(unsigned char graden)
{
	OCR1A=(231+(graden*5.12222));
 2f2:	a8 e8       	ldi	r26, 0x88	; 136
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	87 ee       	ldi	r24, 0xE7	; 231
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	9c 93       	st	X, r25
 2fe:	8e 93       	st	-X, r24
	return 1;
}
char Servo2(unsigned char graden)
{
	OCR1B=(231+(graden*5.12222));
 300:	ea e8       	ldi	r30, 0x8A	; 138
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	83 eb       	ldi	r24, 0xB3	; 179
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	91 83       	std	Z+1, r25	; 0x01
 30a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	3f e3       	ldi	r19, 0x3F	; 63
 310:	42 e0       	ldi	r20, 0x02	; 2
 312:	21 50       	subi	r18, 0x01	; 1
 314:	30 40       	sbci	r19, 0x00	; 0
 316:	40 40       	sbci	r20, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x4c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x56>
 31c:	00 00       	nop
	}
}

char Servo1(unsigned char graden)
{
	OCR1A=(231+(graden*5.12222));
 31e:	11 96       	adiw	r26, 0x01	; 1
 320:	9c 93       	st	X, r25
 322:	8e 93       	st	-X, r24
	return 1;
}
char Servo2(unsigned char graden)
{
	OCR1B=(231+(graden*5.12222));
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	94 e0       	ldi	r25, 0x04	; 4
 328:	91 83       	std	Z+1, r25	; 0x01
 32a:	80 83       	st	Z, r24
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	90 e0       	ldi	r25, 0x00	; 0
	Servo2(180);
	
	//Statusled knipperen
	int i;
	for (i = 0; i < 10; i++) {
		PORTD |=(1<<PORTD7);
 330:	5f 9a       	sbi	0x0b, 7	; 11
 332:	ef ef       	ldi	r30, 0xFF	; 255
 334:	ff e3       	ldi	r31, 0x3F	; 63
 336:	22 e0       	ldi	r18, 0x02	; 2
 338:	e1 50       	subi	r30, 0x01	; 1
 33a:	f0 40       	sbci	r31, 0x00	; 0
 33c:	20 40       	sbci	r18, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x72>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x7c>
 342:	00 00       	nop
		_delay_ms(200);
		PORTD &=~(1<<PORTD7);
 344:	5f 98       	cbi	0x0b, 7	; 11
 346:	3f ef       	ldi	r19, 0xFF	; 255
 348:	4f e3       	ldi	r20, 0x3F	; 63
 34a:	e2 e0       	ldi	r30, 0x02	; 2
 34c:	31 50       	subi	r19, 0x01	; 1
 34e:	40 40       	sbci	r20, 0x00	; 0
 350:	e0 40       	sbci	r30, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x86>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x90>
 356:	00 00       	nop
 358:	01 97       	sbiw	r24, 0x01	; 1
	Servo1(90);
	Servo2(180);
	
	//Statusled knipperen
	int i;
	for (i = 0; i < 10; i++) {
 35a:	51 f7       	brne	.-44     	; 0x330 <main+0x6a>
 35c:	ff ef       	ldi	r31, 0xFF	; 255
 35e:	2f e1       	ldi	r18, 0x1F	; 31
 360:	31 e0       	ldi	r19, 0x01	; 1
 362:	f1 50       	subi	r31, 0x01	; 1
 364:	20 40       	sbci	r18, 0x00	; 0
 366:	30 40       	sbci	r19, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x9c>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0xa6>
 36c:	00 00       	nop
		_delay_ms(200);
		i++;
	}
	
	_delay_ms(100);
	sendString1("\r\nPARKING-OPGESTART");
 36e:	8c e0       	ldi	r24, 0x0C	; 12
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 bf 00 	call	0x17e	; 0x17e <sendString1>
	
	sei();
 376:	78 94       	sei
	{
		
			
		//Alle ingangen controlleren
		//P14
		if(PINC &(1<<PINC4)) { bezetteparkeerplaatsen[14]=1; }
 378:	0f 2e       	mov	r0, r31
 37a:	f3 ec       	ldi	r31, 0xC3	; 195
 37c:	ef 2e       	mov	r14, r31
 37e:	f2 e0       	ldi	r31, 0x02	; 2
 380:	ff 2e       	mov	r15, r31
 382:	f0 2d       	mov	r31, r0
 384:	33 24       	eor	r3, r3
 386:	33 94       	inc	r3
 388:	39 82       	std	Y+1, r3	; 0x01
		
		//Nieuwe seriele berichten verwerken
		if(msg==MSG_NEW)
		{
			PORTD |=(1<<PORTD7);
			msg=MSG_OLD;
 38a:	68 94       	set
 38c:	22 24       	eor	r2, r2
 38e:	21 f8       	bld	r2, 1
			for (int i = 1; i <= 26; i++)
			{
				if(bezetteparkeerplaatsen[i]==1)
				{
					bezetteplaatsen++;
					sprintf(buffer, "PB%d\r\n",i);
 390:	0f 2e       	mov	r0, r31
 392:	f8 e6       	ldi	r31, 0x68	; 104
 394:	6f 2e       	mov	r6, r31
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	7f 2e       	mov	r7, r31
 39a:	f0 2d       	mov	r31, r0
 39c:	0f 2e       	mov	r0, r31
 39e:	fc e1       	ldi	r31, 0x1C	; 28
 3a0:	cf 2e       	mov	r12, r31
 3a2:	f2 e0       	ldi	r31, 0x02	; 2
 3a4:	df 2e       	mov	r13, r31
 3a6:	f0 2d       	mov	r31, r0
				}
				if(bezetteparkeerplaatsen[i]==0)
				{
					sprintf(buffer, "PL%d\r\n",i);
 3a8:	0f 2e       	mov	r0, r31
 3aa:	ff e6       	ldi	r31, 0x6F	; 111
 3ac:	af 2e       	mov	r10, r31
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	bf 2e       	mov	r11, r31
 3b2:	f0 2d       	mov	r31, r0
			for (int i = 1; i <= 26; i++)
			{
				if(bezetteparkeerplaatsen[i]==1)
				{
					bezetteplaatsen++;
					sprintf(buffer, "PB%d\r\n",i);
 3b4:	4c 2c       	mov	r4, r12
 3b6:	5d 2c       	mov	r5, r13
	{
		
			
		//Alle ingangen controlleren
		//P14
		if(PINC &(1<<PINC4)) { bezetteparkeerplaatsen[14]=1; }
 3b8:	34 9b       	sbis	0x06, 4	; 6
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <main+0xfa>
 3bc:	f7 01       	movw	r30, r14
 3be:	36 86       	std	Z+14, r3	; 0x0e
		if(!(PINC &(1<<PINC4))) { bezetteparkeerplaatsen[14]=0; }
 3c0:	34 99       	sbic	0x06, 4	; 6
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <main+0x102>
 3c4:	f7 01       	movw	r30, r14
 3c6:	16 86       	std	Z+14, r1	; 0x0e
			
		//P15
		if(PINC &(1<<PINC5)) { bezetteparkeerplaatsen[15]=1; }
 3c8:	35 9b       	sbis	0x06, 5	; 6
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <main+0x10a>
 3cc:	f7 01       	movw	r30, r14
 3ce:	37 86       	std	Z+15, r3	; 0x0f
		if(!(PINC &(1<<PINC5))) { bezetteparkeerplaatsen[15]=0; }
 3d0:	35 99       	sbic	0x06, 5	; 6
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <main+0x112>
 3d4:	f7 01       	movw	r30, r14
 3d6:	17 86       	std	Z+15, r1	; 0x0f
		
		//P16
		if(PINC &(1<<PINC6)) { bezetteparkeerplaatsen[16]=1; }
 3d8:	36 9b       	sbis	0x06, 6	; 6
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <main+0x11a>
 3dc:	f7 01       	movw	r30, r14
 3de:	30 8a       	std	Z+16, r3	; 0x10
		if(!(PINC &(1<<PINC6))) { bezetteparkeerplaatsen[16]=0; }
 3e0:	36 99       	sbic	0x06, 6	; 6
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <main+0x122>
 3e4:	f7 01       	movw	r30, r14
 3e6:	10 8a       	std	Z+16, r1	; 0x10
		
		//P17
		if(PINC &(1<<PINC7)) { bezetteparkeerplaatsen[17]=1; }
 3e8:	37 9b       	sbis	0x06, 7	; 6
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <main+0x12a>
 3ec:	f7 01       	movw	r30, r14
 3ee:	31 8a       	std	Z+17, r3	; 0x11
		if(!(PINC &(1<<PINC7))) { bezetteparkeerplaatsen[17]=0; }
 3f0:	37 99       	sbic	0x06, 7	; 6
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <main+0x132>
 3f4:	f7 01       	movw	r30, r14
 3f6:	11 8a       	std	Z+17, r1	; 0x11
			
		
		
		
		//Nieuwe seriele berichten verwerken
		if(msg==MSG_NEW)
 3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	09 f0       	breq	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 400:	41 c0       	rjmp	.+130    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
		{
			PORTD |=(1<<PORTD7);
 402:	5f 9a       	sbi	0x0b, 7	; 11
			msg=MSG_OLD;
 404:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <__data_start>
			
			//ptr=strstr(rx_buf,"test");
			
			if(strstr(rx_buf,"slagboom1-0"))
 408:	60 e2       	ldi	r22, 0x20	; 32
 40a:	71 e0       	ldi	r23, 0x01	; 1
 40c:	81 e2       	ldi	r24, 0x21	; 33
 40e:	92 e0       	ldi	r25, 0x02	; 2
 410:	0e 94 5f 04 	call	0x8be	; 0x8be <strstr>
 414:	89 2b       	or	r24, r25
 416:	11 f0       	breq	.+4      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
			{
				slagboom1=0;
 418:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <slagboom1>
			}
			if(strstr(rx_buf,"slagboom1-1"))
 41c:	6c e2       	ldi	r22, 0x2C	; 44
 41e:	71 e0       	ldi	r23, 0x01	; 1
 420:	81 e2       	ldi	r24, 0x21	; 33
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	0e 94 5f 04 	call	0x8be	; 0x8be <strstr>
 428:	89 2b       	or	r24, r25
 42a:	19 f0       	breq	.+6      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
			{
				slagboom1=1;
 42c:	f9 81       	ldd	r31, Y+1	; 0x01
 42e:	f0 93 79 01 	sts	0x0179, r31	; 0x800179 <slagboom1>
			}
			if(strstr(rx_buf,"slagboom1-2"))
 432:	68 e3       	ldi	r22, 0x38	; 56
 434:	71 e0       	ldi	r23, 0x01	; 1
 436:	81 e2       	ldi	r24, 0x21	; 33
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	0e 94 5f 04 	call	0x8be	; 0x8be <strstr>
 43e:	89 2b       	or	r24, r25
 440:	11 f0       	breq	.+4      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
			{
				slagboom1=2;
 442:	20 92 79 01 	sts	0x0179, r2	; 0x800179 <slagboom1>
			}
			if(strstr(rx_buf,"slagboom2-0"))
 446:	64 e4       	ldi	r22, 0x44	; 68
 448:	71 e0       	ldi	r23, 0x01	; 1
 44a:	81 e2       	ldi	r24, 0x21	; 33
 44c:	92 e0       	ldi	r25, 0x02	; 2
 44e:	0e 94 5f 04 	call	0x8be	; 0x8be <strstr>
 452:	89 2b       	or	r24, r25
 454:	11 f0       	breq	.+4      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
			{
				slagboom2=0;
 456:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <slagboom2>
			}
			if(strstr(rx_buf,"slagboom2-1"))
 45a:	60 e5       	ldi	r22, 0x50	; 80
 45c:	71 e0       	ldi	r23, 0x01	; 1
 45e:	81 e2       	ldi	r24, 0x21	; 33
 460:	92 e0       	ldi	r25, 0x02	; 2
 462:	0e 94 5f 04 	call	0x8be	; 0x8be <strstr>
 466:	89 2b       	or	r24, r25
 468:	19 f0       	breq	.+6      	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
			{
				slagboom2=1;
 46a:	29 81       	ldd	r18, Y+1	; 0x01
 46c:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <slagboom2>
			}
			if(strstr(rx_buf,"slagboom2-2"))
 470:	6c e5       	ldi	r22, 0x5C	; 92
 472:	71 e0       	ldi	r23, 0x01	; 1
 474:	81 e2       	ldi	r24, 0x21	; 33
 476:	92 e0       	ldi	r25, 0x02	; 2
 478:	0e 94 5f 04 	call	0x8be	; 0x8be <strstr>
 47c:	89 2b       	or	r24, r25
 47e:	11 f0       	breq	.+4      	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
			{
				slagboom2=2;
 480:	20 92 78 01 	sts	0x0178, r2	; 0x800178 <slagboom2>
			}
		}
		if (ticks1s)
 484:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <ticks1s>
 488:	88 23       	and	r24, r24
 48a:	09 f4       	brne	.+2      	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
 48c:	95 cf       	rjmp	.-214    	; 0x3b8 <main+0xf2>
		{
			bezetteplaatsen=0;
 48e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <bezetteplaatsen>
 492:	84 ec       	ldi	r24, 0xC4	; 196
 494:	92 e0       	ldi	r25, 0x02	; 2
 496:	9b 83       	std	Y+3, r25	; 0x03
 498:	8a 83       	std	Y+2, r24	; 0x02
			for (int i = 1; i <= 26; i++)
 49a:	01 e0       	ldi	r16, 0x01	; 1
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	8a 80       	ldd	r8, Y+2	; 0x02
 4a0:	9b 80       	ldd	r9, Y+3	; 0x03
			{
				if(bezetteparkeerplaatsen[i]==1)
 4a2:	f4 01       	movw	r30, r8
 4a4:	80 81       	ld	r24, Z
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	99 f4       	brne	.+38     	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
				{
					bezetteplaatsen++;
 4aa:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bezetteplaatsen>
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <bezetteplaatsen>
					sprintf(buffer, "PB%d\r\n",i);
 4b4:	1f 93       	push	r17
 4b6:	0f 93       	push	r16
 4b8:	7f 92       	push	r7
 4ba:	6f 92       	push	r6
 4bc:	df 92       	push	r13
 4be:	cf 92       	push	r12
 4c0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sprintf>
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	2a 81       	ldd	r18, Y+2	; 0x02
 4d2:	3b 81       	ldd	r19, Y+3	; 0x03
 4d4:	2f 5f       	subi	r18, 0xFF	; 255
 4d6:	3f 4f       	sbci	r19, 0xFF	; 255
 4d8:	3b 83       	std	Y+3, r19	; 0x03
 4da:	2a 83       	std	Y+2, r18	; 0x02
				}
				if(bezetteparkeerplaatsen[i]==0)
 4dc:	f4 01       	movw	r30, r8
 4de:	80 81       	ld	r24, Z
 4e0:	81 11       	cpse	r24, r1
 4e2:	0e c0       	rjmp	.+28     	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
				{
					sprintf(buffer, "PL%d\r\n",i);
 4e4:	1f 93       	push	r17
 4e6:	0f 93       	push	r16
 4e8:	bf 92       	push	r11
 4ea:	af 92       	push	r10
 4ec:	df 92       	push	r13
 4ee:	cf 92       	push	r12
 4f0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sprintf>
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
				}
				sendString1(buffer);
 500:	84 2d       	mov	r24, r4
 502:	95 2d       	mov	r25, r5
 504:	0e 94 bf 00 	call	0x17e	; 0x17e <sendString1>
 508:	8f ef       	ldi	r24, 0xFF	; 255
 50a:	97 e4       	ldi	r25, 0x47	; 71
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <__FUSE_REGION_LENGTH__+0x10c>
 510:	00 c0       	rjmp	.+0      	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
 512:	00 00       	nop
			}
		}
		if (ticks1s)
		{
			bezetteplaatsen=0;
			for (int i = 1; i <= 26; i++)
 514:	0f 5f       	subi	r16, 0xFF	; 255
 516:	1f 4f       	sbci	r17, 0xFF	; 255
 518:	0b 31       	cpi	r16, 0x1B	; 27
 51a:	11 05       	cpc	r17, r1
 51c:	09 f0       	breq	.+2      	; 0x520 <__FUSE_REGION_LENGTH__+0x120>
 51e:	bf cf       	rjmp	.-130    	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
				}
				sendString1(buffer);
				_delay_ms(20);
			}
			//I2C(0x40, i2c1);
			sprintf(buffer, "B%d\r\n",bezetteplaatsen);
 520:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bezetteplaatsen>
 524:	1f 92       	push	r1
 526:	8f 93       	push	r24
 528:	89 e6       	ldi	r24, 0x69	; 105
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	9f 93       	push	r25
 52e:	8f 93       	push	r24
 530:	df 92       	push	r13
 532:	cf 92       	push	r12
 534:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sprintf>
			sendString1(buffer);
 538:	c6 01       	movw	r24, r12
 53a:	0e 94 bf 00 	call	0x17e	; 0x17e <sendString1>
			ticks1s=0;
 53e:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <ticks1s>
			waarde7(26-bezetteplaatsen);
 542:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <bezetteplaatsen>
 546:	8a e1       	ldi	r24, 0x1A	; 26
 548:	89 1b       	sub	r24, r25
 54a:	0e 94 4c 01 	call	0x298	; 0x298 <waarde7>
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	2e cf       	rjmp	.-420    	; 0x3b8 <main+0xf2>

0000055c <__vector_28>:
	waarde_t=waarde /10;
	return 1;
}

ISR(USART1_RX_vect)
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
	static unsigned char rx_ptr=0;
	rx_buf[rx_ptr]=UDR1;
 572:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 57e:	f9 01       	movw	r30, r18
 580:	ef 5d       	subi	r30, 0xDF	; 223
 582:	fd 4f       	sbci	r31, 0xFD	; 253
 584:	90 83       	st	Z, r25
	if(rx_buf[rx_ptr]=='\r')
 586:	9d 30       	cpi	r25, 0x0D	; 13
 588:	51 f4       	brne	.+20     	; 0x59e <__vector_28+0x42>
	{
		rx_buf[rx_ptr]='\0';
 58a:	f9 01       	movw	r30, r18
 58c:	ef 5d       	subi	r30, 0xDF	; 223
 58e:	fd 4f       	sbci	r31, 0xFD	; 253
 590:	10 82       	st	Z, r1
		rx_ptr=0;
 592:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
		msg=MSG_NEW;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__vector_28+0x48>
	}
	else rx_ptr++;
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
}
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__vector_20>:

ISR(USART0_RX_vect)
{
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	cf 93       	push	r28
 5da:	ef 93       	push	r30
 5dc:	ff 93       	push	r31
	char data = UDR0;
 5de:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(data==0x01){bezetteparkeerplaatsen[1]=0; i2c1+=1;}
 5e2:	c1 30       	cpi	r28, 0x01	; 1
 5e4:	41 f4       	brne	.+16     	; 0x5f6 <__vector_20+0x3c>
 5e6:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <bezetteparkeerplaatsen+0x1>
 5ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i2c1>
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i2c1>
 5f4:	10 c0       	rjmp	.+32     	; 0x616 <__vector_20+0x5c>
	if(data==0x02){bezetteparkeerplaatsen[1]=1; i2c1-=1;}
 5f6:	c2 30       	cpi	r28, 0x02	; 2
 5f8:	49 f4       	brne	.+18     	; 0x60c <__vector_20+0x52>
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <bezetteparkeerplaatsen+0x1>
 600:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i2c1>
 604:	81 50       	subi	r24, 0x01	; 1
 606:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i2c1>
 60a:	0b c0       	rjmp	.+22     	; 0x622 <__vector_20+0x68>
		
	if(data==0x03){bezetteparkeerplaatsen[2]=0;}
 60c:	c3 30       	cpi	r28, 0x03	; 3
 60e:	19 f4       	brne	.+6      	; 0x616 <__vector_20+0x5c>
 610:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <bezetteparkeerplaatsen+0x2>
 614:	0b c0       	rjmp	.+22     	; 0x62c <__vector_20+0x72>
	if(data==0x04){bezetteparkeerplaatsen[2]=1;}
 616:	c4 30       	cpi	r28, 0x04	; 4
 618:	21 f4       	brne	.+8      	; 0x622 <__vector_20+0x68>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <bezetteparkeerplaatsen+0x2>
 620:	0b c0       	rjmp	.+22     	; 0x638 <__vector_20+0x7e>
		
	if(data==0x05){bezetteparkeerplaatsen[3]=0;}
 622:	c5 30       	cpi	r28, 0x05	; 5
 624:	19 f4       	brne	.+6      	; 0x62c <__vector_20+0x72>
 626:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <bezetteparkeerplaatsen+0x3>
 62a:	0b c0       	rjmp	.+22     	; 0x642 <__vector_20+0x88>
	if(data==0x06){bezetteparkeerplaatsen[3]=1;}
 62c:	c6 30       	cpi	r28, 0x06	; 6
 62e:	21 f4       	brne	.+8      	; 0x638 <__vector_20+0x7e>
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <bezetteparkeerplaatsen+0x3>
 636:	0b c0       	rjmp	.+22     	; 0x64e <__vector_20+0x94>
		
	if(data==0x07){bezetteparkeerplaatsen[4]=0;}
 638:	c7 30       	cpi	r28, 0x07	; 7
 63a:	19 f4       	brne	.+6      	; 0x642 <__vector_20+0x88>
 63c:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <bezetteparkeerplaatsen+0x4>
 640:	0b c0       	rjmp	.+22     	; 0x658 <__vector_20+0x9e>
	if(data==0x08){bezetteparkeerplaatsen[4]=1;}
 642:	c8 30       	cpi	r28, 0x08	; 8
 644:	21 f4       	brne	.+8      	; 0x64e <__vector_20+0x94>
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <bezetteparkeerplaatsen+0x4>
 64c:	0b c0       	rjmp	.+22     	; 0x664 <__vector_20+0xaa>
		
	if(data==0x09){bezetteparkeerplaatsen[5]=0;}
 64e:	c9 30       	cpi	r28, 0x09	; 9
 650:	19 f4       	brne	.+6      	; 0x658 <__vector_20+0x9e>
 652:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <bezetteparkeerplaatsen+0x5>
 656:	0b c0       	rjmp	.+22     	; 0x66e <__vector_20+0xb4>
	if(data==0x10){bezetteparkeerplaatsen[5]=1;}
 658:	c0 31       	cpi	r28, 0x10	; 16
 65a:	21 f4       	brne	.+8      	; 0x664 <__vector_20+0xaa>
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <bezetteparkeerplaatsen+0x5>
 662:	0b c0       	rjmp	.+22     	; 0x67a <__vector_20+0xc0>
	
	if(data==0x11){bezetteparkeerplaatsen[6]=0;}
 664:	c1 31       	cpi	r28, 0x11	; 17
 666:	19 f4       	brne	.+6      	; 0x66e <__vector_20+0xb4>
 668:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <bezetteparkeerplaatsen+0x6>
 66c:	0b c0       	rjmp	.+22     	; 0x684 <__vector_20+0xca>
	if(data==0x12){bezetteparkeerplaatsen[6]=1;}
 66e:	c2 31       	cpi	r28, 0x12	; 18
 670:	21 f4       	brne	.+8      	; 0x67a <__vector_20+0xc0>
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <bezetteparkeerplaatsen+0x6>
 678:	0b c0       	rjmp	.+22     	; 0x690 <__vector_20+0xd6>
	
	if(data==0x13){bezetteparkeerplaatsen[7]=0;}
 67a:	c3 31       	cpi	r28, 0x13	; 19
 67c:	19 f4       	brne	.+6      	; 0x684 <__vector_20+0xca>
 67e:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <bezetteparkeerplaatsen+0x7>
 682:	10 c0       	rjmp	.+32     	; 0x6a4 <__vector_20+0xea>
	if(data==0x14){bezetteparkeerplaatsen[7]=1;}
 684:	c4 31       	cpi	r28, 0x14	; 20
 686:	21 f4       	brne	.+8      	; 0x690 <__vector_20+0xd6>
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <bezetteparkeerplaatsen+0x7>
 68e:	15 c0       	rjmp	.+42     	; 0x6ba <__vector_20+0x100>
		
	if(data==0x15){bezetteparkeerplaatsen[8]=0;}
 690:	c5 31       	cpi	r28, 0x15	; 21
 692:	41 f4       	brne	.+16     	; 0x6a4 <__vector_20+0xea>
 694:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <bezetteparkeerplaatsen+0x8>
	if(data==0x16){bezetteparkeerplaatsen[8]=1;}
	I2C(0x40,i2c1);
 698:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <i2c1>
 69c:	80 e4       	ldi	r24, 0x40	; 64
 69e:	0e 94 5d 00 	call	0xba	; 0xba <I2C>
 6a2:	15 c0       	rjmp	.+42     	; 0x6ce <__vector_20+0x114>
	
	if(data==0x13){bezetteparkeerplaatsen[7]=0;}
	if(data==0x14){bezetteparkeerplaatsen[7]=1;}
		
	if(data==0x15){bezetteparkeerplaatsen[8]=0;}
	if(data==0x16){bezetteparkeerplaatsen[8]=1;}
 6a4:	c6 31       	cpi	r28, 0x16	; 22
 6a6:	49 f4       	brne	.+18     	; 0x6ba <__vector_20+0x100>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <bezetteparkeerplaatsen+0x8>
	I2C(0x40,i2c1);
 6ae:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <i2c1>
 6b2:	80 e4       	ldi	r24, 0x40	; 64
 6b4:	0e 94 5d 00 	call	0xba	; 0xba <I2C>
 6b8:	10 c0       	rjmp	.+32     	; 0x6da <__vector_20+0x120>
 6ba:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <i2c1>
 6be:	80 e4       	ldi	r24, 0x40	; 64
 6c0:	0e 94 5d 00 	call	0xba	; 0xba <I2C>
		
	
	if(data==0x17){bezetteparkeerplaatsen[9]=0;}
 6c4:	c7 31       	cpi	r28, 0x17	; 23
 6c6:	19 f4       	brne	.+6      	; 0x6ce <__vector_20+0x114>
 6c8:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <bezetteparkeerplaatsen+0x9>
 6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <__vector_20+0x12a>
	if(data==0x18){bezetteparkeerplaatsen[9]=1;}
 6ce:	c8 31       	cpi	r28, 0x18	; 24
 6d0:	21 f4       	brne	.+8      	; 0x6da <__vector_20+0x120>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <bezetteparkeerplaatsen+0x9>
 6d8:	0b c0       	rjmp	.+22     	; 0x6f0 <__vector_20+0x136>
		
	if(data==0x19){bezetteparkeerplaatsen[10]=0;}
 6da:	c9 31       	cpi	r28, 0x19	; 25
 6dc:	19 f4       	brne	.+6      	; 0x6e4 <__vector_20+0x12a>
 6de:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <bezetteparkeerplaatsen+0xa>
 6e2:	0b c0       	rjmp	.+22     	; 0x6fa <__vector_20+0x140>
	if(data==0x20){bezetteparkeerplaatsen[10]=1;}
 6e4:	c0 32       	cpi	r28, 0x20	; 32
 6e6:	21 f4       	brne	.+8      	; 0x6f0 <__vector_20+0x136>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <bezetteparkeerplaatsen+0xa>
 6ee:	0b c0       	rjmp	.+22     	; 0x706 <__vector_20+0x14c>
	
	if(data==0x21){bezetteparkeerplaatsen[11]=0;}
 6f0:	c1 32       	cpi	r28, 0x21	; 33
 6f2:	19 f4       	brne	.+6      	; 0x6fa <__vector_20+0x140>
 6f4:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <bezetteparkeerplaatsen+0xb>
 6f8:	0b c0       	rjmp	.+22     	; 0x710 <__vector_20+0x156>
	if(data==0x22){bezetteparkeerplaatsen[11]=1;}
 6fa:	c2 32       	cpi	r28, 0x22	; 34
 6fc:	21 f4       	brne	.+8      	; 0x706 <__vector_20+0x14c>
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <bezetteparkeerplaatsen+0xb>
 704:	0b c0       	rjmp	.+22     	; 0x71c <__vector_20+0x162>
		
	if(data==0x23){bezetteparkeerplaatsen[12]=0;}
 706:	c3 32       	cpi	r28, 0x23	; 35
 708:	19 f4       	brne	.+6      	; 0x710 <__vector_20+0x156>
 70a:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <bezetteparkeerplaatsen+0xc>
 70e:	0b c0       	rjmp	.+22     	; 0x726 <__vector_20+0x16c>
	if(data==0x24){bezetteparkeerplaatsen[12]=1;}
 710:	c4 32       	cpi	r28, 0x24	; 36
 712:	21 f4       	brne	.+8      	; 0x71c <__vector_20+0x162>
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <bezetteparkeerplaatsen+0xc>
 71a:	0b c0       	rjmp	.+22     	; 0x732 <__vector_20+0x178>
	
	if(data==0x25){bezetteparkeerplaatsen[13]=0;}
 71c:	c5 32       	cpi	r28, 0x25	; 37
 71e:	19 f4       	brne	.+6      	; 0x726 <__vector_20+0x16c>
 720:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <bezetteparkeerplaatsen+0xd>
 724:	0b c0       	rjmp	.+22     	; 0x73c <__vector_20+0x182>
	if(data==0x26){bezetteparkeerplaatsen[13]=1;}
 726:	c6 32       	cpi	r28, 0x26	; 38
 728:	21 f4       	brne	.+8      	; 0x732 <__vector_20+0x178>
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <bezetteparkeerplaatsen+0xd>
 730:	0b c0       	rjmp	.+22     	; 0x748 <__vector_20+0x18e>
		
	if(data==0x35){bezetteparkeerplaatsen[18]=0;}
 732:	c5 33       	cpi	r28, 0x35	; 53
 734:	19 f4       	brne	.+6      	; 0x73c <__vector_20+0x182>
 736:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <bezetteparkeerplaatsen+0x12>
 73a:	0b c0       	rjmp	.+22     	; 0x752 <__vector_20+0x198>
	if(data==0x36){bezetteparkeerplaatsen[18]=1;}
 73c:	c6 33       	cpi	r28, 0x36	; 54
 73e:	21 f4       	brne	.+8      	; 0x748 <__vector_20+0x18e>
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <bezetteparkeerplaatsen+0x12>
 746:	0b c0       	rjmp	.+22     	; 0x75e <__vector_20+0x1a4>
		
	if(data==0x37){bezetteparkeerplaatsen[19]=0;}
 748:	c7 33       	cpi	r28, 0x37	; 55
 74a:	19 f4       	brne	.+6      	; 0x752 <__vector_20+0x198>
 74c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <bezetteparkeerplaatsen+0x13>
 750:	0b c0       	rjmp	.+22     	; 0x768 <__vector_20+0x1ae>
	if(data==0x38){bezetteparkeerplaatsen[19]=1;}
 752:	c8 33       	cpi	r28, 0x38	; 56
 754:	21 f4       	brne	.+8      	; 0x75e <__vector_20+0x1a4>
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <bezetteparkeerplaatsen+0x13>
 75c:	0b c0       	rjmp	.+22     	; 0x774 <__vector_20+0x1ba>
		
	if(data==0x39){bezetteparkeerplaatsen[20]=0;}
 75e:	c9 33       	cpi	r28, 0x39	; 57
 760:	19 f4       	brne	.+6      	; 0x768 <__vector_20+0x1ae>
 762:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <bezetteparkeerplaatsen+0x14>
 766:	0b c0       	rjmp	.+22     	; 0x77e <__vector_20+0x1c4>
	if(data==0x40){bezetteparkeerplaatsen[20]=1;}
 768:	c0 34       	cpi	r28, 0x40	; 64
 76a:	21 f4       	brne	.+8      	; 0x774 <__vector_20+0x1ba>
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <bezetteparkeerplaatsen+0x14>
 772:	0b c0       	rjmp	.+22     	; 0x78a <__vector_20+0x1d0>
		
	if(data==0x41){bezetteparkeerplaatsen[21]=0;}
 774:	c1 34       	cpi	r28, 0x41	; 65
 776:	19 f4       	brne	.+6      	; 0x77e <__vector_20+0x1c4>
 778:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <bezetteparkeerplaatsen+0x15>
 77c:	0b c0       	rjmp	.+22     	; 0x794 <__vector_20+0x1da>
	if(data==0x42){bezetteparkeerplaatsen[21]=1;}
 77e:	c2 34       	cpi	r28, 0x42	; 66
 780:	21 f4       	brne	.+8      	; 0x78a <__vector_20+0x1d0>
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <bezetteparkeerplaatsen+0x15>
 788:	0b c0       	rjmp	.+22     	; 0x7a0 <__vector_20+0x1e6>
		
	if(data==0x43){bezetteparkeerplaatsen[22]=0;}
 78a:	c3 34       	cpi	r28, 0x43	; 67
 78c:	19 f4       	brne	.+6      	; 0x794 <__vector_20+0x1da>
 78e:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <bezetteparkeerplaatsen+0x16>
 792:	0b c0       	rjmp	.+22     	; 0x7aa <__vector_20+0x1f0>
	if(data==0x44){bezetteparkeerplaatsen[22]=1;}
 794:	c4 34       	cpi	r28, 0x44	; 68
 796:	21 f4       	brne	.+8      	; 0x7a0 <__vector_20+0x1e6>
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <bezetteparkeerplaatsen+0x16>
 79e:	0b c0       	rjmp	.+22     	; 0x7b6 <__vector_20+0x1fc>
		
	if(data==0x45){bezetteparkeerplaatsen[23]=0;}
 7a0:	c5 34       	cpi	r28, 0x45	; 69
 7a2:	19 f4       	brne	.+6      	; 0x7aa <__vector_20+0x1f0>
 7a4:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <bezetteparkeerplaatsen+0x17>
 7a8:	0b c0       	rjmp	.+22     	; 0x7c0 <__vector_20+0x206>
	if(data==0x46){bezetteparkeerplaatsen[23]=1;}
 7aa:	c6 34       	cpi	r28, 0x46	; 70
 7ac:	21 f4       	brne	.+8      	; 0x7b6 <__vector_20+0x1fc>
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <bezetteparkeerplaatsen+0x17>
 7b4:	0b c0       	rjmp	.+22     	; 0x7cc <__vector_20+0x212>
		
	if(data==0x47){bezetteparkeerplaatsen[24]=0;}
 7b6:	c7 34       	cpi	r28, 0x47	; 71
 7b8:	19 f4       	brne	.+6      	; 0x7c0 <__vector_20+0x206>
 7ba:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <bezetteparkeerplaatsen+0x18>
 7be:	0b c0       	rjmp	.+22     	; 0x7d6 <__vector_20+0x21c>
	if(data==0x48){bezetteparkeerplaatsen[24]=1;}
 7c0:	c8 34       	cpi	r28, 0x48	; 72
 7c2:	21 f4       	brne	.+8      	; 0x7cc <__vector_20+0x212>
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <bezetteparkeerplaatsen+0x18>
 7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <__vector_20+0x228>
		
	if(data==0x49){bezetteparkeerplaatsen[25]=0;}
 7cc:	c9 34       	cpi	r28, 0x49	; 73
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <__vector_20+0x21c>
 7d0:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <bezetteparkeerplaatsen+0x19>
 7d4:	0b c0       	rjmp	.+22     	; 0x7ec <__vector_20+0x232>
	if(data==0x50){bezetteparkeerplaatsen[25]=1;}
 7d6:	c0 35       	cpi	r28, 0x50	; 80
 7d8:	21 f4       	brne	.+8      	; 0x7e2 <__vector_20+0x228>
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <bezetteparkeerplaatsen+0x19>
 7e0:	0b c0       	rjmp	.+22     	; 0x7f8 <__vector_20+0x23e>
	
	if(data==0x51){bezetteparkeerplaatsen[26]=0;}
 7e2:	c1 35       	cpi	r28, 0x51	; 81
 7e4:	19 f4       	brne	.+6      	; 0x7ec <__vector_20+0x232>
 7e6:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <bezetteparkeerplaatsen+0x1a>
 7ea:	0f c0       	rjmp	.+30     	; 0x80a <__vector_20+0x250>
	if(data==0x52){bezetteparkeerplaatsen[26]=1;}
 7ec:	c2 35       	cpi	r28, 0x52	; 82
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <__vector_20+0x23e>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <bezetteparkeerplaatsen+0x1a>
 7f6:	12 c0       	rjmp	.+36     	; 0x81c <__vector_20+0x262>
		
	//slagboom1
	if(data==0x53)
 7f8:	c3 35       	cpi	r28, 0x53	; 83
 7fa:	39 f4       	brne	.+14     	; 0x80a <__vector_20+0x250>
	}
}

char Servo1(unsigned char graden)
{
	OCR1A=(231+(graden*5.12222));
 7fc:	87 ee       	ldi	r24, 0xE7	; 231
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 804:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 808:	12 c0       	rjmp	.+36     	; 0x82e <__vector_20+0x274>
	//slagboom1
	if(data==0x53)
	{
		Servo1(0);
	}
	if(data==0x54)
 80a:	c4 35       	cpi	r28, 0x54	; 84
 80c:	39 f4       	brne	.+14     	; 0x81c <__vector_20+0x262>
	}
}

char Servo1(unsigned char graden)
{
	OCR1A=(231+(graden*5.12222));
 80e:	83 eb       	ldi	r24, 0xB3	; 179
 810:	92 e0       	ldi	r25, 0x02	; 2
 812:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 816:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 81a:	11 c0       	rjmp	.+34     	; 0x83e <__vector_20+0x284>
	{
		Servo1(90);
	}
	
	//slagboom2
	if(data==0x55)
 81c:	c5 35       	cpi	r28, 0x55	; 85
 81e:	39 f4       	brne	.+14     	; 0x82e <__vector_20+0x274>
	OCR1A=(231+(graden*5.12222));
	return 1;
}
char Servo2(unsigned char graden)
{
	OCR1B=(231+(graden*5.12222));
 820:	83 eb       	ldi	r24, 0xB3	; 179
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 828:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 82c:	08 c0       	rjmp	.+16     	; 0x83e <__vector_20+0x284>
	//slagboom2
	if(data==0x55)
	{
		Servo2(90);
	}
	if(data==0x56)
 82e:	c6 35       	cpi	r28, 0x56	; 86
 830:	31 f4       	brne	.+12     	; 0x83e <__vector_20+0x284>
	OCR1A=(231+(graden*5.12222));
	return 1;
}
char Servo2(unsigned char graden)
{
	OCR1B=(231+(graden*5.12222));
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	94 e0       	ldi	r25, 0x04	; 4
 836:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 83a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
	if(data==0x56)
	{
		Servo2(180);
	}
}
 83e:	ff 91       	pop	r31
 840:	ef 91       	pop	r30
 842:	cf 91       	pop	r28
 844:	bf 91       	pop	r27
 846:	af 91       	pop	r26
 848:	9f 91       	pop	r25
 84a:	8f 91       	pop	r24
 84c:	7f 91       	pop	r23
 84e:	6f 91       	pop	r22
 850:	5f 91       	pop	r21
 852:	4f 91       	pop	r20
 854:	3f 91       	pop	r19
 856:	2f 91       	pop	r18
 858:	0f 90       	pop	r0
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	0f 90       	pop	r0
 85e:	1f 90       	pop	r1
 860:	18 95       	reti

00000862 <twi_init>:
unsigned char twi_read_ack(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  //start TWI module en stuur ACK na ontvangst
while( !(TWCR & (1<<TWINT)) ); //wachten tot einde transmissie
return TWDR;	//terugkeren met ontvangen data
}
 862:	8a e2       	ldi	r24, 0x2A	; 42
 864:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 868:	08 95       	ret

0000086a <twi_start>:
 86a:	ec eb       	ldi	r30, 0xBC	; 188
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	10 82       	st	Z, r1
 870:	84 ea       	ldi	r24, 0xA4	; 164
 872:	80 83       	st	Z, r24
 874:	80 81       	ld	r24, Z
 876:	88 23       	and	r24, r24
 878:	ec f7       	brge	.-6      	; 0x874 <twi_start+0xa>
 87a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 87e:	98 7f       	andi	r25, 0xF8	; 248
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	98 30       	cpi	r25, 0x08	; 8
 884:	09 f0       	breq	.+2      	; 0x888 <twi_start+0x1e>
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret

0000088a <twi_write>:
 88a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 88e:	84 e8       	ldi	r24, 0x84	; 132
 890:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 894:	ec eb       	ldi	r30, 0xBC	; 188
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	88 23       	and	r24, r24
 89c:	ec f7       	brge	.-6      	; 0x898 <twi_write+0xe>
 89e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 8a2:	98 7f       	andi	r25, 0xF8	; 248
 8a4:	98 31       	cpi	r25, 0x18	; 24
 8a6:	29 f0       	breq	.+10     	; 0x8b2 <twi_write+0x28>
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 34       	cpi	r25, 0x40	; 64
 8ac:	19 f0       	breq	.+6      	; 0x8b4 <twi_write+0x2a>
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	08 95       	ret
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	08 95       	ret

000008b6 <twi_stop>:

//stoppen transmissie
void twi_stop(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); //versturen van een stop conditie
 8b6:	84 e9       	ldi	r24, 0x94	; 148
 8b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 8bc:	08 95       	ret

000008be <strstr>:
 8be:	fb 01       	movw	r30, r22
 8c0:	51 91       	ld	r21, Z+
 8c2:	55 23       	and	r21, r21
 8c4:	a9 f0       	breq	.+42     	; 0x8f0 <strstr+0x32>
 8c6:	bf 01       	movw	r22, r30
 8c8:	dc 01       	movw	r26, r24
 8ca:	4d 91       	ld	r20, X+
 8cc:	45 17       	cp	r20, r21
 8ce:	41 11       	cpse	r20, r1
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <strstr+0xc>
 8d2:	59 f4       	brne	.+22     	; 0x8ea <strstr+0x2c>
 8d4:	cd 01       	movw	r24, r26
 8d6:	01 90       	ld	r0, Z+
 8d8:	00 20       	and	r0, r0
 8da:	49 f0       	breq	.+18     	; 0x8ee <strstr+0x30>
 8dc:	4d 91       	ld	r20, X+
 8de:	40 15       	cp	r20, r0
 8e0:	41 11       	cpse	r20, r1
 8e2:	c9 f3       	breq	.-14     	; 0x8d6 <strstr+0x18>
 8e4:	fb 01       	movw	r30, r22
 8e6:	41 11       	cpse	r20, r1
 8e8:	ef cf       	rjmp	.-34     	; 0x8c8 <strstr+0xa>
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	01 97       	sbiw	r24, 0x01	; 1
 8f0:	08 95       	ret

000008f2 <sprintf>:
 8f2:	ae e0       	ldi	r26, 0x0E	; 14
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	ef e7       	ldi	r30, 0x7F	; 127
 8f8:	f4 e0       	ldi	r31, 0x04	; 4
 8fa:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__prologue_saves__+0x1c>
 8fe:	0d 89       	ldd	r16, Y+21	; 0x15
 900:	1e 89       	ldd	r17, Y+22	; 0x16
 902:	86 e0       	ldi	r24, 0x06	; 6
 904:	8c 83       	std	Y+4, r24	; 0x04
 906:	1a 83       	std	Y+2, r17	; 0x02
 908:	09 83       	std	Y+1, r16	; 0x01
 90a:	8f ef       	ldi	r24, 0xFF	; 255
 90c:	9f e7       	ldi	r25, 0x7F	; 127
 90e:	9e 83       	std	Y+6, r25	; 0x06
 910:	8d 83       	std	Y+5, r24	; 0x05
 912:	ae 01       	movw	r20, r28
 914:	47 5e       	subi	r20, 0xE7	; 231
 916:	5f 4f       	sbci	r21, 0xFF	; 255
 918:	6f 89       	ldd	r22, Y+23	; 0x17
 91a:	78 8d       	ldd	r23, Y+24	; 0x18
 91c:	ce 01       	movw	r24, r28
 91e:	01 96       	adiw	r24, 0x01	; 1
 920:	0e 94 9c 04 	call	0x938	; 0x938 <vfprintf>
 924:	2f 81       	ldd	r18, Y+7	; 0x07
 926:	38 85       	ldd	r19, Y+8	; 0x08
 928:	f8 01       	movw	r30, r16
 92a:	e2 0f       	add	r30, r18
 92c:	f3 1f       	adc	r31, r19
 92e:	10 82       	st	Z, r1
 930:	2e 96       	adiw	r28, 0x0e	; 14
 932:	e4 e0       	ldi	r30, 0x04	; 4
 934:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__epilogue_restores__+0x1c>

00000938 <vfprintf>:
 938:	ac e0       	ldi	r26, 0x0C	; 12
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	e2 ea       	ldi	r30, 0xA2	; 162
 93e:	f4 e0       	ldi	r31, 0x04	; 4
 940:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__prologue_saves__>
 944:	7c 01       	movw	r14, r24
 946:	6b 01       	movw	r12, r22
 948:	8a 01       	movw	r16, r20
 94a:	fc 01       	movw	r30, r24
 94c:	17 82       	std	Z+7, r1	; 0x07
 94e:	16 82       	std	Z+6, r1	; 0x06
 950:	83 81       	ldd	r24, Z+3	; 0x03
 952:	81 ff       	sbrs	r24, 1
 954:	bd c1       	rjmp	.+890    	; 0xcd0 <vfprintf+0x398>
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	4c 01       	movw	r8, r24
 95c:	f7 01       	movw	r30, r14
 95e:	93 81       	ldd	r25, Z+3	; 0x03
 960:	f6 01       	movw	r30, r12
 962:	93 fd       	sbrc	r25, 3
 964:	85 91       	lpm	r24, Z+
 966:	93 ff       	sbrs	r25, 3
 968:	81 91       	ld	r24, Z+
 96a:	6f 01       	movw	r12, r30
 96c:	88 23       	and	r24, r24
 96e:	09 f4       	brne	.+2      	; 0x972 <vfprintf+0x3a>
 970:	ab c1       	rjmp	.+854    	; 0xcc8 <vfprintf+0x390>
 972:	85 32       	cpi	r24, 0x25	; 37
 974:	39 f4       	brne	.+14     	; 0x984 <vfprintf+0x4c>
 976:	93 fd       	sbrc	r25, 3
 978:	85 91       	lpm	r24, Z+
 97a:	93 ff       	sbrs	r25, 3
 97c:	81 91       	ld	r24, Z+
 97e:	6f 01       	movw	r12, r30
 980:	85 32       	cpi	r24, 0x25	; 37
 982:	29 f4       	brne	.+10     	; 0x98e <vfprintf+0x56>
 984:	b7 01       	movw	r22, r14
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 98c:	e7 cf       	rjmp	.-50     	; 0x95c <vfprintf+0x24>
 98e:	51 2c       	mov	r5, r1
 990:	31 2c       	mov	r3, r1
 992:	20 e0       	ldi	r18, 0x00	; 0
 994:	20 32       	cpi	r18, 0x20	; 32
 996:	a0 f4       	brcc	.+40     	; 0x9c0 <vfprintf+0x88>
 998:	8b 32       	cpi	r24, 0x2B	; 43
 99a:	69 f0       	breq	.+26     	; 0x9b6 <vfprintf+0x7e>
 99c:	30 f4       	brcc	.+12     	; 0x9aa <vfprintf+0x72>
 99e:	80 32       	cpi	r24, 0x20	; 32
 9a0:	59 f0       	breq	.+22     	; 0x9b8 <vfprintf+0x80>
 9a2:	83 32       	cpi	r24, 0x23	; 35
 9a4:	69 f4       	brne	.+26     	; 0x9c0 <vfprintf+0x88>
 9a6:	20 61       	ori	r18, 0x10	; 16
 9a8:	2c c0       	rjmp	.+88     	; 0xa02 <vfprintf+0xca>
 9aa:	8d 32       	cpi	r24, 0x2D	; 45
 9ac:	39 f0       	breq	.+14     	; 0x9bc <vfprintf+0x84>
 9ae:	80 33       	cpi	r24, 0x30	; 48
 9b0:	39 f4       	brne	.+14     	; 0x9c0 <vfprintf+0x88>
 9b2:	21 60       	ori	r18, 0x01	; 1
 9b4:	26 c0       	rjmp	.+76     	; 0xa02 <vfprintf+0xca>
 9b6:	22 60       	ori	r18, 0x02	; 2
 9b8:	24 60       	ori	r18, 0x04	; 4
 9ba:	23 c0       	rjmp	.+70     	; 0xa02 <vfprintf+0xca>
 9bc:	28 60       	ori	r18, 0x08	; 8
 9be:	21 c0       	rjmp	.+66     	; 0xa02 <vfprintf+0xca>
 9c0:	27 fd       	sbrc	r18, 7
 9c2:	27 c0       	rjmp	.+78     	; 0xa12 <vfprintf+0xda>
 9c4:	30 ed       	ldi	r19, 0xD0	; 208
 9c6:	38 0f       	add	r19, r24
 9c8:	3a 30       	cpi	r19, 0x0A	; 10
 9ca:	78 f4       	brcc	.+30     	; 0x9ea <vfprintf+0xb2>
 9cc:	26 ff       	sbrs	r18, 6
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <vfprintf+0xa4>
 9d0:	fa e0       	ldi	r31, 0x0A	; 10
 9d2:	5f 9e       	mul	r5, r31
 9d4:	30 0d       	add	r19, r0
 9d6:	11 24       	eor	r1, r1
 9d8:	53 2e       	mov	r5, r19
 9da:	13 c0       	rjmp	.+38     	; 0xa02 <vfprintf+0xca>
 9dc:	8a e0       	ldi	r24, 0x0A	; 10
 9de:	38 9e       	mul	r3, r24
 9e0:	30 0d       	add	r19, r0
 9e2:	11 24       	eor	r1, r1
 9e4:	33 2e       	mov	r3, r19
 9e6:	20 62       	ori	r18, 0x20	; 32
 9e8:	0c c0       	rjmp	.+24     	; 0xa02 <vfprintf+0xca>
 9ea:	8e 32       	cpi	r24, 0x2E	; 46
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <vfprintf+0xbe>
 9ee:	26 fd       	sbrc	r18, 6
 9f0:	6b c1       	rjmp	.+726    	; 0xcc8 <vfprintf+0x390>
 9f2:	20 64       	ori	r18, 0x40	; 64
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <vfprintf+0xca>
 9f6:	8c 36       	cpi	r24, 0x6C	; 108
 9f8:	11 f4       	brne	.+4      	; 0x9fe <vfprintf+0xc6>
 9fa:	20 68       	ori	r18, 0x80	; 128
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0xca>
 9fe:	88 36       	cpi	r24, 0x68	; 104
 a00:	41 f4       	brne	.+16     	; 0xa12 <vfprintf+0xda>
 a02:	f6 01       	movw	r30, r12
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	6f 01       	movw	r12, r30
 a0e:	81 11       	cpse	r24, r1
 a10:	c1 cf       	rjmp	.-126    	; 0x994 <vfprintf+0x5c>
 a12:	98 2f       	mov	r25, r24
 a14:	9f 7d       	andi	r25, 0xDF	; 223
 a16:	95 54       	subi	r25, 0x45	; 69
 a18:	93 30       	cpi	r25, 0x03	; 3
 a1a:	28 f4       	brcc	.+10     	; 0xa26 <vfprintf+0xee>
 a1c:	0c 5f       	subi	r16, 0xFC	; 252
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	ff e3       	ldi	r31, 0x3F	; 63
 a22:	f9 83       	std	Y+1, r31	; 0x01
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <vfprintf+0x108>
 a26:	83 36       	cpi	r24, 0x63	; 99
 a28:	31 f0       	breq	.+12     	; 0xa36 <vfprintf+0xfe>
 a2a:	83 37       	cpi	r24, 0x73	; 115
 a2c:	71 f0       	breq	.+28     	; 0xa4a <vfprintf+0x112>
 a2e:	83 35       	cpi	r24, 0x53	; 83
 a30:	09 f0       	breq	.+2      	; 0xa34 <vfprintf+0xfc>
 a32:	5b c0       	rjmp	.+182    	; 0xaea <vfprintf+0x1b2>
 a34:	22 c0       	rjmp	.+68     	; 0xa7a <vfprintf+0x142>
 a36:	f8 01       	movw	r30, r16
 a38:	80 81       	ld	r24, Z
 a3a:	89 83       	std	Y+1, r24	; 0x01
 a3c:	0e 5f       	subi	r16, 0xFE	; 254
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	44 24       	eor	r4, r4
 a42:	43 94       	inc	r4
 a44:	51 2c       	mov	r5, r1
 a46:	54 01       	movw	r10, r8
 a48:	15 c0       	rjmp	.+42     	; 0xa74 <vfprintf+0x13c>
 a4a:	38 01       	movw	r6, r16
 a4c:	f2 e0       	ldi	r31, 0x02	; 2
 a4e:	6f 0e       	add	r6, r31
 a50:	71 1c       	adc	r7, r1
 a52:	f8 01       	movw	r30, r16
 a54:	a0 80       	ld	r10, Z
 a56:	b1 80       	ldd	r11, Z+1	; 0x01
 a58:	26 ff       	sbrs	r18, 6
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <vfprintf+0x12a>
 a5c:	65 2d       	mov	r22, r5
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <vfprintf+0x12e>
 a62:	6f ef       	ldi	r22, 0xFF	; 255
 a64:	7f ef       	ldi	r23, 0xFF	; 255
 a66:	c5 01       	movw	r24, r10
 a68:	2c 87       	std	Y+12, r18	; 0x0c
 a6a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strnlen>
 a6e:	2c 01       	movw	r4, r24
 a70:	83 01       	movw	r16, r6
 a72:	2c 85       	ldd	r18, Y+12	; 0x0c
 a74:	2f 77       	andi	r18, 0x7F	; 127
 a76:	22 2e       	mov	r2, r18
 a78:	17 c0       	rjmp	.+46     	; 0xaa8 <vfprintf+0x170>
 a7a:	38 01       	movw	r6, r16
 a7c:	f2 e0       	ldi	r31, 0x02	; 2
 a7e:	6f 0e       	add	r6, r31
 a80:	71 1c       	adc	r7, r1
 a82:	f8 01       	movw	r30, r16
 a84:	a0 80       	ld	r10, Z
 a86:	b1 80       	ldd	r11, Z+1	; 0x01
 a88:	26 ff       	sbrs	r18, 6
 a8a:	03 c0       	rjmp	.+6      	; 0xa92 <vfprintf+0x15a>
 a8c:	65 2d       	mov	r22, r5
 a8e:	70 e0       	ldi	r23, 0x00	; 0
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <vfprintf+0x15e>
 a92:	6f ef       	ldi	r22, 0xFF	; 255
 a94:	7f ef       	ldi	r23, 0xFF	; 255
 a96:	c5 01       	movw	r24, r10
 a98:	2c 87       	std	Y+12, r18	; 0x0c
 a9a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <strnlen_P>
 a9e:	2c 01       	movw	r4, r24
 aa0:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa2:	20 68       	ori	r18, 0x80	; 128
 aa4:	22 2e       	mov	r2, r18
 aa6:	83 01       	movw	r16, r6
 aa8:	23 fc       	sbrc	r2, 3
 aaa:	1b c0       	rjmp	.+54     	; 0xae2 <vfprintf+0x1aa>
 aac:	83 2d       	mov	r24, r3
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	48 16       	cp	r4, r24
 ab2:	59 06       	cpc	r5, r25
 ab4:	b0 f4       	brcc	.+44     	; 0xae2 <vfprintf+0x1aa>
 ab6:	b7 01       	movw	r22, r14
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 ac0:	3a 94       	dec	r3
 ac2:	f4 cf       	rjmp	.-24     	; 0xaac <vfprintf+0x174>
 ac4:	f5 01       	movw	r30, r10
 ac6:	27 fc       	sbrc	r2, 7
 ac8:	85 91       	lpm	r24, Z+
 aca:	27 fe       	sbrs	r2, 7
 acc:	81 91       	ld	r24, Z+
 ace:	5f 01       	movw	r10, r30
 ad0:	b7 01       	movw	r22, r14
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 ad8:	31 10       	cpse	r3, r1
 ada:	3a 94       	dec	r3
 adc:	f1 e0       	ldi	r31, 0x01	; 1
 ade:	4f 1a       	sub	r4, r31
 ae0:	51 08       	sbc	r5, r1
 ae2:	41 14       	cp	r4, r1
 ae4:	51 04       	cpc	r5, r1
 ae6:	71 f7       	brne	.-36     	; 0xac4 <vfprintf+0x18c>
 ae8:	e5 c0       	rjmp	.+458    	; 0xcb4 <vfprintf+0x37c>
 aea:	84 36       	cpi	r24, 0x64	; 100
 aec:	11 f0       	breq	.+4      	; 0xaf2 <vfprintf+0x1ba>
 aee:	89 36       	cpi	r24, 0x69	; 105
 af0:	39 f5       	brne	.+78     	; 0xb40 <vfprintf+0x208>
 af2:	f8 01       	movw	r30, r16
 af4:	27 ff       	sbrs	r18, 7
 af6:	07 c0       	rjmp	.+14     	; 0xb06 <vfprintf+0x1ce>
 af8:	60 81       	ld	r22, Z
 afa:	71 81       	ldd	r23, Z+1	; 0x01
 afc:	82 81       	ldd	r24, Z+2	; 0x02
 afe:	93 81       	ldd	r25, Z+3	; 0x03
 b00:	0c 5f       	subi	r16, 0xFC	; 252
 b02:	1f 4f       	sbci	r17, 0xFF	; 255
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <vfprintf+0x1de>
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	07 2e       	mov	r0, r23
 b0c:	00 0c       	add	r0, r0
 b0e:	88 0b       	sbc	r24, r24
 b10:	99 0b       	sbc	r25, r25
 b12:	0e 5f       	subi	r16, 0xFE	; 254
 b14:	1f 4f       	sbci	r17, 0xFF	; 255
 b16:	2f 76       	andi	r18, 0x6F	; 111
 b18:	72 2e       	mov	r7, r18
 b1a:	97 ff       	sbrs	r25, 7
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <vfprintf+0x1f8>
 b1e:	90 95       	com	r25
 b20:	80 95       	com	r24
 b22:	70 95       	com	r23
 b24:	61 95       	neg	r22
 b26:	7f 4f       	sbci	r23, 0xFF	; 255
 b28:	8f 4f       	sbci	r24, 0xFF	; 255
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	20 68       	ori	r18, 0x80	; 128
 b2e:	72 2e       	mov	r7, r18
 b30:	2a e0       	ldi	r18, 0x0A	; 10
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	a4 01       	movw	r20, r8
 b36:	0e 94 bc 06 	call	0xd78	; 0xd78 <__ultoa_invert>
 b3a:	a8 2e       	mov	r10, r24
 b3c:	a8 18       	sub	r10, r8
 b3e:	44 c0       	rjmp	.+136    	; 0xbc8 <vfprintf+0x290>
 b40:	85 37       	cpi	r24, 0x75	; 117
 b42:	29 f4       	brne	.+10     	; 0xb4e <vfprintf+0x216>
 b44:	2f 7e       	andi	r18, 0xEF	; 239
 b46:	b2 2e       	mov	r11, r18
 b48:	2a e0       	ldi	r18, 0x0A	; 10
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	25 c0       	rjmp	.+74     	; 0xb98 <vfprintf+0x260>
 b4e:	f2 2f       	mov	r31, r18
 b50:	f9 7f       	andi	r31, 0xF9	; 249
 b52:	bf 2e       	mov	r11, r31
 b54:	8f 36       	cpi	r24, 0x6F	; 111
 b56:	c1 f0       	breq	.+48     	; 0xb88 <vfprintf+0x250>
 b58:	18 f4       	brcc	.+6      	; 0xb60 <vfprintf+0x228>
 b5a:	88 35       	cpi	r24, 0x58	; 88
 b5c:	79 f0       	breq	.+30     	; 0xb7c <vfprintf+0x244>
 b5e:	b4 c0       	rjmp	.+360    	; 0xcc8 <vfprintf+0x390>
 b60:	80 37       	cpi	r24, 0x70	; 112
 b62:	19 f0       	breq	.+6      	; 0xb6a <vfprintf+0x232>
 b64:	88 37       	cpi	r24, 0x78	; 120
 b66:	21 f0       	breq	.+8      	; 0xb70 <vfprintf+0x238>
 b68:	af c0       	rjmp	.+350    	; 0xcc8 <vfprintf+0x390>
 b6a:	2f 2f       	mov	r18, r31
 b6c:	20 61       	ori	r18, 0x10	; 16
 b6e:	b2 2e       	mov	r11, r18
 b70:	b4 fe       	sbrs	r11, 4
 b72:	0d c0       	rjmp	.+26     	; 0xb8e <vfprintf+0x256>
 b74:	8b 2d       	mov	r24, r11
 b76:	84 60       	ori	r24, 0x04	; 4
 b78:	b8 2e       	mov	r11, r24
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <vfprintf+0x256>
 b7c:	24 ff       	sbrs	r18, 4
 b7e:	0a c0       	rjmp	.+20     	; 0xb94 <vfprintf+0x25c>
 b80:	9f 2f       	mov	r25, r31
 b82:	96 60       	ori	r25, 0x06	; 6
 b84:	b9 2e       	mov	r11, r25
 b86:	06 c0       	rjmp	.+12     	; 0xb94 <vfprintf+0x25c>
 b88:	28 e0       	ldi	r18, 0x08	; 8
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	05 c0       	rjmp	.+10     	; 0xb98 <vfprintf+0x260>
 b8e:	20 e1       	ldi	r18, 0x10	; 16
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <vfprintf+0x260>
 b94:	20 e1       	ldi	r18, 0x10	; 16
 b96:	32 e0       	ldi	r19, 0x02	; 2
 b98:	f8 01       	movw	r30, r16
 b9a:	b7 fe       	sbrs	r11, 7
 b9c:	07 c0       	rjmp	.+14     	; 0xbac <vfprintf+0x274>
 b9e:	60 81       	ld	r22, Z
 ba0:	71 81       	ldd	r23, Z+1	; 0x01
 ba2:	82 81       	ldd	r24, Z+2	; 0x02
 ba4:	93 81       	ldd	r25, Z+3	; 0x03
 ba6:	0c 5f       	subi	r16, 0xFC	; 252
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	06 c0       	rjmp	.+12     	; 0xbb8 <vfprintf+0x280>
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 5f       	subi	r16, 0xFE	; 254
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	a4 01       	movw	r20, r8
 bba:	0e 94 bc 06 	call	0xd78	; 0xd78 <__ultoa_invert>
 bbe:	a8 2e       	mov	r10, r24
 bc0:	a8 18       	sub	r10, r8
 bc2:	fb 2d       	mov	r31, r11
 bc4:	ff 77       	andi	r31, 0x7F	; 127
 bc6:	7f 2e       	mov	r7, r31
 bc8:	76 fe       	sbrs	r7, 6
 bca:	0b c0       	rjmp	.+22     	; 0xbe2 <vfprintf+0x2aa>
 bcc:	37 2d       	mov	r19, r7
 bce:	3e 7f       	andi	r19, 0xFE	; 254
 bd0:	a5 14       	cp	r10, r5
 bd2:	50 f4       	brcc	.+20     	; 0xbe8 <vfprintf+0x2b0>
 bd4:	74 fe       	sbrs	r7, 4
 bd6:	0a c0       	rjmp	.+20     	; 0xbec <vfprintf+0x2b4>
 bd8:	72 fc       	sbrc	r7, 2
 bda:	08 c0       	rjmp	.+16     	; 0xbec <vfprintf+0x2b4>
 bdc:	37 2d       	mov	r19, r7
 bde:	3e 7e       	andi	r19, 0xEE	; 238
 be0:	05 c0       	rjmp	.+10     	; 0xbec <vfprintf+0x2b4>
 be2:	ba 2c       	mov	r11, r10
 be4:	37 2d       	mov	r19, r7
 be6:	03 c0       	rjmp	.+6      	; 0xbee <vfprintf+0x2b6>
 be8:	ba 2c       	mov	r11, r10
 bea:	01 c0       	rjmp	.+2      	; 0xbee <vfprintf+0x2b6>
 bec:	b5 2c       	mov	r11, r5
 bee:	34 ff       	sbrs	r19, 4
 bf0:	0d c0       	rjmp	.+26     	; 0xc0c <vfprintf+0x2d4>
 bf2:	fe 01       	movw	r30, r28
 bf4:	ea 0d       	add	r30, r10
 bf6:	f1 1d       	adc	r31, r1
 bf8:	80 81       	ld	r24, Z
 bfa:	80 33       	cpi	r24, 0x30	; 48
 bfc:	11 f4       	brne	.+4      	; 0xc02 <vfprintf+0x2ca>
 bfe:	39 7e       	andi	r19, 0xE9	; 233
 c00:	09 c0       	rjmp	.+18     	; 0xc14 <vfprintf+0x2dc>
 c02:	32 ff       	sbrs	r19, 2
 c04:	06 c0       	rjmp	.+12     	; 0xc12 <vfprintf+0x2da>
 c06:	b3 94       	inc	r11
 c08:	b3 94       	inc	r11
 c0a:	04 c0       	rjmp	.+8      	; 0xc14 <vfprintf+0x2dc>
 c0c:	83 2f       	mov	r24, r19
 c0e:	86 78       	andi	r24, 0x86	; 134
 c10:	09 f0       	breq	.+2      	; 0xc14 <vfprintf+0x2dc>
 c12:	b3 94       	inc	r11
 c14:	33 fd       	sbrc	r19, 3
 c16:	13 c0       	rjmp	.+38     	; 0xc3e <vfprintf+0x306>
 c18:	30 ff       	sbrs	r19, 0
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0x2f0>
 c1c:	5a 2c       	mov	r5, r10
 c1e:	b3 14       	cp	r11, r3
 c20:	18 f4       	brcc	.+6      	; 0xc28 <vfprintf+0x2f0>
 c22:	53 0c       	add	r5, r3
 c24:	5b 18       	sub	r5, r11
 c26:	b3 2c       	mov	r11, r3
 c28:	b3 14       	cp	r11, r3
 c2a:	68 f4       	brcc	.+26     	; 0xc46 <vfprintf+0x30e>
 c2c:	b7 01       	movw	r22, r14
 c2e:	80 e2       	ldi	r24, 0x20	; 32
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	3c 87       	std	Y+12, r19	; 0x0c
 c34:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 c38:	b3 94       	inc	r11
 c3a:	3c 85       	ldd	r19, Y+12	; 0x0c
 c3c:	f5 cf       	rjmp	.-22     	; 0xc28 <vfprintf+0x2f0>
 c3e:	b3 14       	cp	r11, r3
 c40:	10 f4       	brcc	.+4      	; 0xc46 <vfprintf+0x30e>
 c42:	3b 18       	sub	r3, r11
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x310>
 c46:	31 2c       	mov	r3, r1
 c48:	34 ff       	sbrs	r19, 4
 c4a:	12 c0       	rjmp	.+36     	; 0xc70 <vfprintf+0x338>
 c4c:	b7 01       	movw	r22, r14
 c4e:	80 e3       	ldi	r24, 0x30	; 48
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	3c 87       	std	Y+12, r19	; 0x0c
 c54:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 c58:	3c 85       	ldd	r19, Y+12	; 0x0c
 c5a:	32 ff       	sbrs	r19, 2
 c5c:	17 c0       	rjmp	.+46     	; 0xc8c <vfprintf+0x354>
 c5e:	31 fd       	sbrc	r19, 1
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <vfprintf+0x330>
 c62:	88 e7       	ldi	r24, 0x78	; 120
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x334>
 c68:	88 e5       	ldi	r24, 0x58	; 88
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	b7 01       	movw	r22, r14
 c6e:	0c c0       	rjmp	.+24     	; 0xc88 <vfprintf+0x350>
 c70:	83 2f       	mov	r24, r19
 c72:	86 78       	andi	r24, 0x86	; 134
 c74:	59 f0       	breq	.+22     	; 0xc8c <vfprintf+0x354>
 c76:	31 ff       	sbrs	r19, 1
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <vfprintf+0x346>
 c7a:	8b e2       	ldi	r24, 0x2B	; 43
 c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vfprintf+0x348>
 c7e:	80 e2       	ldi	r24, 0x20	; 32
 c80:	37 fd       	sbrc	r19, 7
 c82:	8d e2       	ldi	r24, 0x2D	; 45
 c84:	b7 01       	movw	r22, r14
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 c8c:	a5 14       	cp	r10, r5
 c8e:	38 f4       	brcc	.+14     	; 0xc9e <vfprintf+0x366>
 c90:	b7 01       	movw	r22, r14
 c92:	80 e3       	ldi	r24, 0x30	; 48
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 c9a:	5a 94       	dec	r5
 c9c:	f7 cf       	rjmp	.-18     	; 0xc8c <vfprintf+0x354>
 c9e:	aa 94       	dec	r10
 ca0:	f4 01       	movw	r30, r8
 ca2:	ea 0d       	add	r30, r10
 ca4:	f1 1d       	adc	r31, r1
 ca6:	80 81       	ld	r24, Z
 ca8:	b7 01       	movw	r22, r14
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 cb0:	a1 10       	cpse	r10, r1
 cb2:	f5 cf       	rjmp	.-22     	; 0xc9e <vfprintf+0x366>
 cb4:	33 20       	and	r3, r3
 cb6:	09 f4       	brne	.+2      	; 0xcba <vfprintf+0x382>
 cb8:	51 ce       	rjmp	.-862    	; 0x95c <vfprintf+0x24>
 cba:	b7 01       	movw	r22, r14
 cbc:	80 e2       	ldi	r24, 0x20	; 32
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 84 06 	call	0xd08	; 0xd08 <fputc>
 cc4:	3a 94       	dec	r3
 cc6:	f6 cf       	rjmp	.-20     	; 0xcb4 <vfprintf+0x37c>
 cc8:	f7 01       	movw	r30, r14
 cca:	86 81       	ldd	r24, Z+6	; 0x06
 ccc:	97 81       	ldd	r25, Z+7	; 0x07
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <vfprintf+0x39c>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	2c 96       	adiw	r28, 0x0c	; 12
 cd6:	e2 e1       	ldi	r30, 0x12	; 18
 cd8:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__epilogue_restores__>

00000cdc <strnlen_P>:
 cdc:	fc 01       	movw	r30, r24
 cde:	05 90       	lpm	r0, Z+
 ce0:	61 50       	subi	r22, 0x01	; 1
 ce2:	70 40       	sbci	r23, 0x00	; 0
 ce4:	01 10       	cpse	r0, r1
 ce6:	d8 f7       	brcc	.-10     	; 0xcde <strnlen_P+0x2>
 ce8:	80 95       	com	r24
 cea:	90 95       	com	r25
 cec:	8e 0f       	add	r24, r30
 cee:	9f 1f       	adc	r25, r31
 cf0:	08 95       	ret

00000cf2 <strnlen>:
 cf2:	fc 01       	movw	r30, r24
 cf4:	61 50       	subi	r22, 0x01	; 1
 cf6:	70 40       	sbci	r23, 0x00	; 0
 cf8:	01 90       	ld	r0, Z+
 cfa:	01 10       	cpse	r0, r1
 cfc:	d8 f7       	brcc	.-10     	; 0xcf4 <strnlen+0x2>
 cfe:	80 95       	com	r24
 d00:	90 95       	com	r25
 d02:	8e 0f       	add	r24, r30
 d04:	9f 1f       	adc	r25, r31
 d06:	08 95       	ret

00000d08 <fputc>:
 d08:	0f 93       	push	r16
 d0a:	1f 93       	push	r17
 d0c:	cf 93       	push	r28
 d0e:	df 93       	push	r29
 d10:	fb 01       	movw	r30, r22
 d12:	23 81       	ldd	r18, Z+3	; 0x03
 d14:	21 fd       	sbrc	r18, 1
 d16:	03 c0       	rjmp	.+6      	; 0xd1e <fputc+0x16>
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	9f ef       	ldi	r25, 0xFF	; 255
 d1c:	28 c0       	rjmp	.+80     	; 0xd6e <fputc+0x66>
 d1e:	22 ff       	sbrs	r18, 2
 d20:	16 c0       	rjmp	.+44     	; 0xd4e <fputc+0x46>
 d22:	46 81       	ldd	r20, Z+6	; 0x06
 d24:	57 81       	ldd	r21, Z+7	; 0x07
 d26:	24 81       	ldd	r18, Z+4	; 0x04
 d28:	35 81       	ldd	r19, Z+5	; 0x05
 d2a:	42 17       	cp	r20, r18
 d2c:	53 07       	cpc	r21, r19
 d2e:	44 f4       	brge	.+16     	; 0xd40 <fputc+0x38>
 d30:	a0 81       	ld	r26, Z
 d32:	b1 81       	ldd	r27, Z+1	; 0x01
 d34:	9d 01       	movw	r18, r26
 d36:	2f 5f       	subi	r18, 0xFF	; 255
 d38:	3f 4f       	sbci	r19, 0xFF	; 255
 d3a:	31 83       	std	Z+1, r19	; 0x01
 d3c:	20 83       	st	Z, r18
 d3e:	8c 93       	st	X, r24
 d40:	26 81       	ldd	r18, Z+6	; 0x06
 d42:	37 81       	ldd	r19, Z+7	; 0x07
 d44:	2f 5f       	subi	r18, 0xFF	; 255
 d46:	3f 4f       	sbci	r19, 0xFF	; 255
 d48:	37 83       	std	Z+7, r19	; 0x07
 d4a:	26 83       	std	Z+6, r18	; 0x06
 d4c:	10 c0       	rjmp	.+32     	; 0xd6e <fputc+0x66>
 d4e:	eb 01       	movw	r28, r22
 d50:	09 2f       	mov	r16, r25
 d52:	18 2f       	mov	r17, r24
 d54:	00 84       	ldd	r0, Z+8	; 0x08
 d56:	f1 85       	ldd	r31, Z+9	; 0x09
 d58:	e0 2d       	mov	r30, r0
 d5a:	09 95       	icall
 d5c:	89 2b       	or	r24, r25
 d5e:	e1 f6       	brne	.-72     	; 0xd18 <fputc+0x10>
 d60:	8e 81       	ldd	r24, Y+6	; 0x06
 d62:	9f 81       	ldd	r25, Y+7	; 0x07
 d64:	01 96       	adiw	r24, 0x01	; 1
 d66:	9f 83       	std	Y+7, r25	; 0x07
 d68:	8e 83       	std	Y+6, r24	; 0x06
 d6a:	81 2f       	mov	r24, r17
 d6c:	90 2f       	mov	r25, r16
 d6e:	df 91       	pop	r29
 d70:	cf 91       	pop	r28
 d72:	1f 91       	pop	r17
 d74:	0f 91       	pop	r16
 d76:	08 95       	ret

00000d78 <__ultoa_invert>:
 d78:	fa 01       	movw	r30, r20
 d7a:	aa 27       	eor	r26, r26
 d7c:	28 30       	cpi	r18, 0x08	; 8
 d7e:	51 f1       	breq	.+84     	; 0xdd4 <__ultoa_invert+0x5c>
 d80:	20 31       	cpi	r18, 0x10	; 16
 d82:	81 f1       	breq	.+96     	; 0xde4 <__ultoa_invert+0x6c>
 d84:	e8 94       	clt
 d86:	6f 93       	push	r22
 d88:	6e 7f       	andi	r22, 0xFE	; 254
 d8a:	6e 5f       	subi	r22, 0xFE	; 254
 d8c:	7f 4f       	sbci	r23, 0xFF	; 255
 d8e:	8f 4f       	sbci	r24, 0xFF	; 255
 d90:	9f 4f       	sbci	r25, 0xFF	; 255
 d92:	af 4f       	sbci	r26, 0xFF	; 255
 d94:	b1 e0       	ldi	r27, 0x01	; 1
 d96:	3e d0       	rcall	.+124    	; 0xe14 <__ultoa_invert+0x9c>
 d98:	b4 e0       	ldi	r27, 0x04	; 4
 d9a:	3c d0       	rcall	.+120    	; 0xe14 <__ultoa_invert+0x9c>
 d9c:	67 0f       	add	r22, r23
 d9e:	78 1f       	adc	r23, r24
 da0:	89 1f       	adc	r24, r25
 da2:	9a 1f       	adc	r25, r26
 da4:	a1 1d       	adc	r26, r1
 da6:	68 0f       	add	r22, r24
 da8:	79 1f       	adc	r23, r25
 daa:	8a 1f       	adc	r24, r26
 dac:	91 1d       	adc	r25, r1
 dae:	a1 1d       	adc	r26, r1
 db0:	6a 0f       	add	r22, r26
 db2:	71 1d       	adc	r23, r1
 db4:	81 1d       	adc	r24, r1
 db6:	91 1d       	adc	r25, r1
 db8:	a1 1d       	adc	r26, r1
 dba:	20 d0       	rcall	.+64     	; 0xdfc <__ultoa_invert+0x84>
 dbc:	09 f4       	brne	.+2      	; 0xdc0 <__ultoa_invert+0x48>
 dbe:	68 94       	set
 dc0:	3f 91       	pop	r19
 dc2:	2a e0       	ldi	r18, 0x0A	; 10
 dc4:	26 9f       	mul	r18, r22
 dc6:	11 24       	eor	r1, r1
 dc8:	30 19       	sub	r19, r0
 dca:	30 5d       	subi	r19, 0xD0	; 208
 dcc:	31 93       	st	Z+, r19
 dce:	de f6       	brtc	.-74     	; 0xd86 <__ultoa_invert+0xe>
 dd0:	cf 01       	movw	r24, r30
 dd2:	08 95       	ret
 dd4:	46 2f       	mov	r20, r22
 dd6:	47 70       	andi	r20, 0x07	; 7
 dd8:	40 5d       	subi	r20, 0xD0	; 208
 dda:	41 93       	st	Z+, r20
 ddc:	b3 e0       	ldi	r27, 0x03	; 3
 dde:	0f d0       	rcall	.+30     	; 0xdfe <__ultoa_invert+0x86>
 de0:	c9 f7       	brne	.-14     	; 0xdd4 <__ultoa_invert+0x5c>
 de2:	f6 cf       	rjmp	.-20     	; 0xdd0 <__ultoa_invert+0x58>
 de4:	46 2f       	mov	r20, r22
 de6:	4f 70       	andi	r20, 0x0F	; 15
 de8:	40 5d       	subi	r20, 0xD0	; 208
 dea:	4a 33       	cpi	r20, 0x3A	; 58
 dec:	18 f0       	brcs	.+6      	; 0xdf4 <__ultoa_invert+0x7c>
 dee:	49 5d       	subi	r20, 0xD9	; 217
 df0:	31 fd       	sbrc	r19, 1
 df2:	40 52       	subi	r20, 0x20	; 32
 df4:	41 93       	st	Z+, r20
 df6:	02 d0       	rcall	.+4      	; 0xdfc <__ultoa_invert+0x84>
 df8:	a9 f7       	brne	.-22     	; 0xde4 <__ultoa_invert+0x6c>
 dfa:	ea cf       	rjmp	.-44     	; 0xdd0 <__ultoa_invert+0x58>
 dfc:	b4 e0       	ldi	r27, 0x04	; 4
 dfe:	a6 95       	lsr	r26
 e00:	97 95       	ror	r25
 e02:	87 95       	ror	r24
 e04:	77 95       	ror	r23
 e06:	67 95       	ror	r22
 e08:	ba 95       	dec	r27
 e0a:	c9 f7       	brne	.-14     	; 0xdfe <__ultoa_invert+0x86>
 e0c:	00 97       	sbiw	r24, 0x00	; 0
 e0e:	61 05       	cpc	r22, r1
 e10:	71 05       	cpc	r23, r1
 e12:	08 95       	ret
 e14:	9b 01       	movw	r18, r22
 e16:	ac 01       	movw	r20, r24
 e18:	0a 2e       	mov	r0, r26
 e1a:	06 94       	lsr	r0
 e1c:	57 95       	ror	r21
 e1e:	47 95       	ror	r20
 e20:	37 95       	ror	r19
 e22:	27 95       	ror	r18
 e24:	ba 95       	dec	r27
 e26:	c9 f7       	brne	.-14     	; 0xe1a <__ultoa_invert+0xa2>
 e28:	62 0f       	add	r22, r18
 e2a:	73 1f       	adc	r23, r19
 e2c:	84 1f       	adc	r24, r20
 e2e:	95 1f       	adc	r25, r21
 e30:	a0 1d       	adc	r26, r0
 e32:	08 95       	ret

00000e34 <__prologue_saves__>:
 e34:	2f 92       	push	r2
 e36:	3f 92       	push	r3
 e38:	4f 92       	push	r4
 e3a:	5f 92       	push	r5
 e3c:	6f 92       	push	r6
 e3e:	7f 92       	push	r7
 e40:	8f 92       	push	r8
 e42:	9f 92       	push	r9
 e44:	af 92       	push	r10
 e46:	bf 92       	push	r11
 e48:	cf 92       	push	r12
 e4a:	df 92       	push	r13
 e4c:	ef 92       	push	r14
 e4e:	ff 92       	push	r15
 e50:	0f 93       	push	r16
 e52:	1f 93       	push	r17
 e54:	cf 93       	push	r28
 e56:	df 93       	push	r29
 e58:	cd b7       	in	r28, 0x3d	; 61
 e5a:	de b7       	in	r29, 0x3e	; 62
 e5c:	ca 1b       	sub	r28, r26
 e5e:	db 0b       	sbc	r29, r27
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	09 94       	ijmp

00000e6c <__epilogue_restores__>:
 e6c:	2a 88       	ldd	r2, Y+18	; 0x12
 e6e:	39 88       	ldd	r3, Y+17	; 0x11
 e70:	48 88       	ldd	r4, Y+16	; 0x10
 e72:	5f 84       	ldd	r5, Y+15	; 0x0f
 e74:	6e 84       	ldd	r6, Y+14	; 0x0e
 e76:	7d 84       	ldd	r7, Y+13	; 0x0d
 e78:	8c 84       	ldd	r8, Y+12	; 0x0c
 e7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e7e:	b9 84       	ldd	r11, Y+9	; 0x09
 e80:	c8 84       	ldd	r12, Y+8	; 0x08
 e82:	df 80       	ldd	r13, Y+7	; 0x07
 e84:	ee 80       	ldd	r14, Y+6	; 0x06
 e86:	fd 80       	ldd	r15, Y+5	; 0x05
 e88:	0c 81       	ldd	r16, Y+4	; 0x04
 e8a:	1b 81       	ldd	r17, Y+3	; 0x03
 e8c:	aa 81       	ldd	r26, Y+2	; 0x02
 e8e:	b9 81       	ldd	r27, Y+1	; 0x01
 e90:	ce 0f       	add	r28, r30
 e92:	d1 1d       	adc	r29, r1
 e94:	0f b6       	in	r0, 0x3f	; 63
 e96:	f8 94       	cli
 e98:	de bf       	out	0x3e, r29	; 62
 e9a:	0f be       	out	0x3f, r0	; 63
 e9c:	cd bf       	out	0x3d, r28	; 61
 e9e:	ed 01       	movw	r28, r26
 ea0:	08 95       	ret

00000ea2 <_exit>:
 ea2:	f8 94       	cli

00000ea4 <__stop_program>:
 ea4:	ff cf       	rjmp	.-2      	; 0xea4 <__stop_program>
