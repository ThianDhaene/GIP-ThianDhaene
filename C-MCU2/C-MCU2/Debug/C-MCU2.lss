
C-MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000144  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f8  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018a  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000177  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  000007d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_20>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <serieel_init0>:
}

void serieel_init0(void)
{
	//de pin PD2 als ingang (RX), de pin PD3 als uitgang (TX) met een hoog niveau
	DDRD &=~(1<<DDRD0);
  94:	50 98       	cbi	0x0a, 0	; 10
	DDRD |=(1<<DDRD1);
  96:	51 9a       	sbi	0x0a, 1	; 10
	
	//init seriële communicatie
	//USART0, 9600 baud, 8 databit, geen pariteit, 1 stopbit, geen interrupt werking
	UCSR0A &=~(1<<U2X0); //normale snelheid
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	80 83       	st	Z, r24
	UBRR0 =23; //Instellen van Baudrate op 9600bps
  a2:	87 e1       	ldi	r24, 0x17	; 23
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= ((1<<UCSZ00)|(1<<UCSZ01)); //8 databits instellen
  ae:	a2 ec       	ldi	r26, 0xC2	; 194
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	8c 91       	ld	r24, X
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	8c 93       	st	X, r24
	UCSR0B &=~ (1<<UCSZ02);	//8 databits instellen
  b8:	e1 ec       	ldi	r30, 0xC1	; 193
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	80 83       	st	Z, r24
	UCSR0C &=~ (1<<USBS0); //1 stopbit
  c2:	8c 91       	ld	r24, X
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	8c 93       	st	X, r24
	UCSR0C &=~(1<<UPM00)|(1<<UPM01); //geen pariteit
  c8:	8c 91       	ld	r24, X
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	8c 93       	st	X, r24
	UCSR0B |=((1<<RXEN0)|(1<<TXEN0)); //activeren zender en ontvanger
  ce:	80 81       	ld	r24, Z
  d0:	88 61       	ori	r24, 0x18	; 24
  d2:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0); //activeren interrupt rx
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <main>:
void sendString1(char s[]);
void sendChar1(char data);

int main(void)
{
    serieel_init0();
  dc:	0e 94 4a 00 	call	0x94	; 0x94 <serieel_init0>
	
	//Sensoren voor P1 P2 P3
	DDRA &=~ (1<<DDRA4) | (1<<DDRA3) |(1<<DDRA7);
  e0:	0c 98       	cbi	0x01, 4	; 1
	
	//Schakelaars voor P4,5,6,7,8,9,10,11
	DDRC &=~(1<<DDRC0)|(1<<DDRC1)|(1<<DDRC2)|(1<<DDRC3)|(1<<DDRC4)|(1<<DDRC5)|(1<<DDRC6)|(1<<DDRC7);
  e2:	38 98       	cbi	0x07, 0	; 7
	//P12,13,18,19,20
	DDRD &=~(1<<DDRD6)|(1<<DDRD5)|(1<<DDRD4)|(1<<DDRD3)|(1<<DDRD2);
  e4:	56 98       	cbi	0x0a, 6	; 10
	//P21,22,23,24,25
	DDRB &=~(1<<DDRB4)|(1<<DDRB3)|(1<<DDRB2)|(1<<DDRB1)|(1<<DDRB0);
  e6:	24 98       	cbi	0x04, 4	; 4
	//P26
	DDRA &=~(1<<DDRA0);
  e8:	08 98       	cbi	0x01, 0	; 1
	
	
	DDRD |= ((1<<DDRD3) |(1<<DDRD4) |(1<<DDRD5) | (1<<DDRD6)); 
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	88 67       	ori	r24, 0x78	; 120
  ee:	8a b9       	out	0x0a, r24	; 10
	
    while (1) 
    {
		
    }
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x14>

000000f2 <__vector_20>:
	UCSR0B |=((1<<RXEN0)|(1<<TXEN0)); //activeren zender en ontvanger
	UCSR0B |= (1<<RXCIE0); //activeren interrupt rx
}

ISR(USART0_RX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
	//interrupt bij ontvangen van seriele communicatie
}
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
